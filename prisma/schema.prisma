generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  Recipe        Recipe[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model System {
  id          Int      @id @default(autoincrement())
  installed   Boolean  @default(false)
  installDate DateTime @default(now())
  maintenance Boolean  @default(false)
}

model Recipe {
  id           String                @id @default(cuid())
  title        String
  slug         String
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  userId       String
  description  String
  difficulty   Difficulty
  published    Boolean               @default(false)
  servings     Int?                  @default(1)
  categories   CategoriesOnRecipes[]
  user         User                  @relation(fields: [userId], references: [id])
  recipe_steps RecipesStep[]
}

model RecipesStep {
  id          Int    @id @default(autoincrement())
  title       String
  description String
  recipeId    String
  recipe      Recipe @relation(fields: [recipeId], references: [id])
}

model Ingredient {
  id          Int     @id @default(autoincrement())
  amount      Int?
  name        String  @unique
  slug        String?
  description String
  country     String?
}

model IngredientOnRecipe {
  id     Int    @id @default(autoincrement())
  amount Int
  unit   String
}

model Category {
  id            Int                   @id @default(autoincrement())
  name          String
  slug          String
  description   String?
  subcategories SubCategory[]
  recipes       CategoriesOnRecipes[]
}

model SubCategory {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String
  description String?
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])
}

model CategoriesOnRecipes {
  recipeId   String
  categoryId Int
  assignedAt DateTime @default(now())
  category   Category @relation(fields: [categoryId], references: [id])
  recipe     Recipe   @relation(fields: [recipeId], references: [id])

  @@id([recipeId, categoryId])
}

enum Difficulty {
  EASY
  MEDIUM
  DIFFICULT
}
